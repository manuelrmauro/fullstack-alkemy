swagger: '2.0'
info:
  description: 'Documentacion relacionada al rest server de la aplicacion Foodarity'
  version: '1.0.0'
  title: 'Foodarity App - Backend docs'
  contact:
    email: 'martin.a.chaparro@gmail.com'
host: 'localhost:4000'
basePath: '/api/v1'
tags:
  - name: 'Auth'
    description: 'Operaciones de Autenticacion'
  - name: 'User'
    description: 'Operaciones sobre Usuarios'
  - name: 'Company'
    description: 'Operaciones sobre Companias'
  - name: 'Product'
    description: 'Operaciones sobre Productos'
  - name: 'Location'
    description: 'Busqueda de Provicias y Ciudades'
  - name: 'Donation'
    description: 'Genera donaciones y permite verlas'
schemes:
  - 'http'
paths:
  /auth:
    post:
      tags:
        - 'Auth'
      summary: 'Login de Usuarios'
      description: 'Ruta para Login de usuarios.'
      operationId: 'LoginUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'Body'
          description: 'Crear Usuario'
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LoginResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/LoginResponse400'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /auth/renew:
    get:
      tags:
        - 'Auth'
      summary: 'Renovar token'
      description: 'Renueva el token y retorna uno nuevo'
      operationId: 'RenewToken'
      consumes:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LoginResponse200'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /users:
    post:
      tags:
        - 'User'
      summary: 'Crear usuarios'
      description: 'Crea un Usuario'
      operationId: 'addUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'Body'
          description: 'Crear un usuario nuevo'
          required: true
          schema:
            $ref: '#/definitions/CreateUserRequest'
      responses:
        '201':
          description: 'Created'
          schema:
            $ref: '#/definitions/CreateUserResponse201'
        '400':
          description: 'Bad Request'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/ErrorValidation'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
    get:
      tags:
        - 'User'
      summary: 'Lista todos los usuarios'
      description: 'Ruta para la creacion de usuarios.'
      operationId: 'getUsers'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      responses:
        '200':
          description: 'OK'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /users/{id}:
    get:
      tags:
        - 'User'
      summary: 'Usuario por Id'
      description: 'Obtiene un usuario por su I'
      operationId: 'getUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a obtener"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/GetUserResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    delete:
      tags:
        - 'User'
      summary: 'Eliminar Usuario'
      description: 'Eliminina un usuario'
      operationId: 'DeleteUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a eliminar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    put:
      tags:
        - 'User'
      summary: 'Actualiza Usuario'
      description: 'Actualiza un usuario'
      operationId: 'UpdateUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a actualizar"
        required: true
        type: "integer"
        format: "int64"
      - name: 'Body'
        in: 'body'
        description: 'Datos a actualizar'
        required: true
        schema:
          $ref: '#/definitions/UpdateUserRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /users/upload:
    patch:
      tags:
        - 'User'
      summary: 'Actualizar Imagen Usuario'
      description: 'Actualiza o agrega una foto al usuario'
      operationId: 'updateUserImage'
      consumes:
        - 'multipart/form-data'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del usuario a actualizar"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /companies:
    post:
      tags:
        - 'Company'
      summary: 'Crear comercio u ONG'
      description: 'Ruta para la creacion de comercios. Campos NO requeridos => webside. Referencias: type: 1 = Comercio / 2 = ONG. LOGO: Se debe subir por file y los demas datos dentro de un JSON llamado data'
      operationId: 'addCompany'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      - in: 'body'
        name: 'Body'
        description: 'Crear Usuario'
        required: true
        schema:
          $ref: '#/definitions/CompanyRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    get:
      tags:
        - 'Company'
      summary: 'Lista todas las companias'
      description: 'Lista todas las companias'
      operationId: 'GetAllCompanies'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'      
  /companies/id/{id}:
    get:
      tags:
        - 'Company'
      summary: 'Muestra una compania por id'
      description: 'Muestra una compania por id'
      operationId: 'getCompany'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "Id de la compañia "
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /companies/byUser:
    get:
      tags:
        - 'Company'
      summary: 'Muestra la compania del usuario auth'
      description: 'Muestra la compania del usuario autenticado'
      operationId: 'getCompanyByUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /companies/{id}/upload/{field}:
    patch:
      tags:
        - 'Company'
      summary: 'Actualiza Imagen Compania'
      description: 'Actualiza o crea una imagen de una compania. Ejemplo: http://localhost:4000/api/v1/companies/1/upload/logo'
      operationId: 'UpdateCompanyImage'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id de la compañia a actualizar"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /companies/{id}:
    put:
      tags:
        - 'Company'
      summary: 'Actualizacion de info compañia'
      description: '(no funcional) Actualizacion de info compañia, se deben actualizar todos los datos que se pasan por body'
      operationId: 'UpdateUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id de la compañia a actualizar"
        required: true
        type: "integer"
        format: "int64"
      - name: 'Body'
        in: 'body'
        description: 'Datos a actualizar'
        required: true
        schema:
          $ref: '#/definitions/UpdateCompanyRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /companies/disabled/{id}:
    delete:
      tags:
        - 'Company'
      summary: 'Deshabilitar compañia y productos  '
      description: 'Deshabilitar compañia y sus productos publicados con autenticacion del propietario de la compañia'
      operationId: 'DeleteCompany'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id de la compañia a deshabilitar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /products:
    post:
      tags:
        - 'Product'
      summary: 'Crear Producto'
      description: 'Crea Productos para publicar, solo tiene auth los users que tengan comercio habilitado'
      operationId: 'postProduct'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - in: 'body'
        name: 'Body'
        description: 'Crear un Producto'
        required: true
        schema:
          $ref: '#/definitions/CreateProductRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
    get:
      tags:
        - 'Product'
      summary: 'Lista Productos'
      description: 'Lista de productos (solo las publicaciones activas), incluyendo opciones de paginado, filtrado y ordenamiento'
      operationId: 'getProducts'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "lote"
        in: "query"
        description: "Filtra por nombre los resultados"
        type: "string"
      - name: "size"
        in: "query"
        description: "Decide la cantidad de productos por pagina"
        type: "string"
      - name: "page"
        in: "query"
        description: "Selecciona la pagina que devuelve"
        type: "string"
      - name: "categoryName"
        in: "query"
        description: "Filtra por nombre de categoria los resultados"
        type: "string"
      - name: "categoryId"
        in: "query"
        description: "Filtra por id de categoria los resultados"
        type: "string"
      - name: "minPrice"
        in: "query"
        description: "Filtra por precio minimo los resultados"
        type: "string"
      - name: "maxPrice"
        in: "query"
        description: "Filtra por precio maximo los resultados"
        type: "string"
      - name: "expirationDate"
        in: "query"
        description: "Filtra por fecha de vencimiento los resultados"
        type: "string"
      - name: "order"
        in: "query"
        description: "ordena los resultados pasandole 'priceASC', 'priceDesc', 'expirationASC', 'expirationDESC'"
        type: "string"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/ProductResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /products/id/:productId:
    get:
      tags:
        - 'Product'
      summary: 'Producto por id'
      description: 'trae un producto por id'
      operationId: 'getProductById'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "Id del producto"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/ProductResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
    delete:
      tags:
        - 'Product'
      summary: 'Eliminar producto'
      description: 'Elimina un producto'
      operationId: 'DeleteProducts'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id del producto a eliminar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /products/company/:companyid:
    get:
      tags:
        - 'Product'
      summary: 'Lista de productos por compania'
      description: 'trae una lista de productos (solo las publicaciones activas) por id de compania'
      operationId: 'getCompanyProductsById'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "Id de la compania"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/ProductResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '404':
          description: 'Not Found'
          schema:
            $ref: '#/definitions/ErrorResponse404'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /products/byAuth:
    get:
      tags:
        - 'Product'
      summary: 'Lista de productos por usuario logeado'
      description: 'trae una lista de todos los productos de la compania del usuario logeado'
      operationId: 'getCompanyProductsByAuth'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id de la compania"
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/ProductResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /states:
    get:
      tags:
        - 'Location'
      summary: 'Listado de Provincias'
      description: 'Lista todas las provincias'
      operationId: 'getStates'
      parameters:
      - name: "name"
        in: "query"
        description: "Filtra por nombre los resultados"
        type: "string"
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LocationResponse200' 
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /cities:
    get:
      tags:
        - 'Location'
      summary: 'Listado de ciudades'
      description: 'Filtra por nombre los resultados'
      operationId: 'getCities'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "name"
        in: "query"
        description: "Nombre de la ciudad a buscar"
        type: "string"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LocationResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /cities/:stateId:
    get:
      tags:
        - 'Location'
      summary: 'Lista las ciudades por provincia'
      description: 'Ruta para la creacion de usuarios.'
      operationId: 'getCitiesByState'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "id"
        in: "path"
        description: "Id de la provincia a buscar"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Nombre de la ciudad a buscar"
        type: "string"
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/LocationResponse200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /donation/:ongId:
    post:
      tags:
        - 'Donation'
      summary: 'Crear donacion'
      description: 'Crea una donacion por parte de un comercio a una ONG especifica pasada por params para publicar, solo podran hacer los comercios auth.Se puede añadir una imagen del lote pero debe ir en file'
      operationId: 'postDonation'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      - name: "id"
        in: "path"
        description: "Id de la ONG a donar"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      - in: 'body'
        name: 'Body'
        description: 'Crear Donacion'
        required: true
        schema:
          $ref: '#/definitions/CreateDonationRequest'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
      security:
        - api_key: []
  /donation:
    get:
      tags:
        - 'Donation'
      summary: 'Lista de donaciones recibidas por la ONG'
      description: 'Lista de donaciones recibidas por una ONG, se especifica que empresa realizo la donacion y el producto. Debe estar auth la ONG'
      operationId: 'GetAllDonationByOng'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'
  /donation/commerce:
    get:
      tags:
        - 'Donation'
      summary: 'Lista de donaciones hechas por una empresa'
      description: 'Lista de donaciones realizadas por una empresa, se especifica que ONG recibio el producto. Debe estar auth la empresa'
      operationId: 'GetAllDonationByCommerce'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: 'Bearer Token'
      responses:
        '200':
          description: 'OK'
          schema:
            $ref: '#/definitions/Response200'
        '400':
          description: 'Bad Request'
          schema:
            $ref: '#/definitions/ErrorResponse400'
        '401':
          description: ' Unauthorized'
          schema:
            $ref: '#/definitions/ErrorResponse401'
        '500':
          description: 'Internal Server Error'
          schema:
            $ref: '#/definitions/ErrorResponse500'

securityDefinitions:
  api_key:
    type: 'apiKey'
    name: 'Authorization'
    in: 'header'
definitions:
  Address:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      street:
        type: 'string'
      number:
        type: 'integer'
        format: 'int64'
      zipcode:
        type: 'string'
      stateId:
        type: 'string'
      cityId:
        type: 'string'
      companyId:
        type: 'integer'
        format: 'int64'      
      city:
        $ref: '#/definitions/City'
      state:
        $ref: '#/definitions/State'
  City:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      photo:
        $ref: '#/definitions/Photo'
      status:
        type: 'boolean'
      CompanyId:
        type: 'integer'
        format: 'int64'
      role:
        $ref: '#/definitions/UserRole'
  Photo:
    type: 'object'
    properties:
      public_id:
        type: 'string'
      url:
        type: 'string'
  State:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
  UserRole:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      role:
        type: 'string'
  CompanyType:
    type: 'object'
    properties:
      type:
        type: 'string'
  Company:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      description:
        type: 'string'
      areaCode:
        type: 'string'
      phone:
        type: 'string'
      email:
        type: 'string'
      website:
        type: 'string'
      logo:
        $ref: '#/definitions/Photo'
      banner:
        $ref: '#/definitions/Photo'
      status:
        type: 'string'
      deleted:
        type: 'boolean'
      ownerId:
        type: 'integer'
        format: 'int64'
      type_id:
        type: 'integer'
        format: 'int64'
      type:
        $ref: '#/definitions/CompanyType'
      address:
        $ref: '#/definitions/Address'
  LoginRequest:
    type: 'object'
    properties:
      email:
        type: 'string'
      password:
        type: 'string'
  CompanyRequest:
    type: 'object'
    properties:
      name:
        type: 'string'
      description:
        type: 'string'
      areaCode:
        type: 'integer'
      phone:
        type: 'integer'
      email:
        type: 'string'
      website:
        type: 'string'
      status:
        type: 'string'
      deleted:
        type: 'boolean'
      street:
        type: 'string'
      number:
        type: 'integer'
      zipcode:
        type: 'integer'
      cityId:
        type: 'integer'
      stateId:
        type: 'integer'
      type:
        type: 'integer'
        format: 'int64'
  UpdateCompanyRequest:
    type: 'object'
    properties:
      description:
        type: 'string'
      areaCode:
        type: 'string'
      phone:
        type: 'string'
      email:
        type: 'string'
      webside:
        type: 'string'
      street:
        type: 'string'
      number:
        type: 'string'
      zipcode:
        type: 'string'
  CreateProductRequest:
    type: 'object'
    properties:
      lote:
        type: 'string'
      description:
        type: 'string'
        format: 'text'
      photo:
        type: 'object'
      quantity:
        type: 'integer'
      price: 
        type: 'integer'
        format: 'double'
      publicationDate:
        type: 'string'
        format: 'MM/DD/AAAA'
      expirationDate:
        type: 'string'
        format: 'MM/DD/AAAA'
      category:
        type: 'integer'
        format: 'id'
  LoginResponse200:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      roleId:
        type: 'integer'
        format: 'int64'
      token:
        type: 'string'
  GetUserResponse200:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      email:
        type: 'string'
      phone:
        type: 'string'
      photo:
        $ref: '#/definitions/Photo'
      status:
        type: 'boolean'
      role:
        $ref: '#/definitions/UserRole'
      company:
        $ref: '#/definitions/Company'
  CreateDonationRequest:
    type: 'object'
    properties:
      lote:
        type: 'string'
      description:
        type: 'string'
        format: 'text'
      quantity:
        type: 'integer'
      category:
        type: 'integer'
        format: 'id'
  LoginResponse400:
    type: 'object'
    properties:
      message:
        type: 'string'
  LocationResponse200:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      lat: 
        type: 'integer'
        format: 'double'
      lon: 
        type: 'integer'
        format: 'double'
  ProductResponse200:
    type: 'object'
    properties:
      id:
        type: 'string'
      lote:
        type: 'string'
      description:
        type: 'string'
      quantity:
        type: 'integer'
      photo:
        type: 'string'
        format: 'url'
      price:
        type: 'integer'
      publicationDate:
        type: 'string'
        format: 'date'
      expirationDate:
        type: 'string'
        format: 'date'
      status:
        type: 'string'
      category:
        type: 'object'
      company: 
        type: 'object'
      publisher:
        type: 'object'
  Response200:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse500:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse400:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse401:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorResponse404:
    type: 'object'
    properties:
      message:
        type: 'string'
  ErrorValidation:
    type: 'object'
    properties:
      msg:
        type: 'string'
      param:
        type: 'string'
      location:
        type: 'string'
  CreateUserRequest:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
      password:
        type: 'string'
      phone:
        type: 'string'
  UpdateUserRequest:
    type: 'object'
    properties:
      name:
        type: 'string'
      email:
        type: 'string'
  CreateUserResponse201:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      email:
        type: 'string'
      token:
        type: 'string'
  # ApiResponse:
  #   type: 'object'
  #   properties:
  #     code:
  #       type: 'integer'
  #       format: 'int32'
  #     type:
  #       type: 'string'
  #     message:
  #       type: 'string'
